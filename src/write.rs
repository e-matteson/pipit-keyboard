use std::fmt::Display;
// use std::collections::BTreeMap;
use std::path::Path;
use std::ffi::OsStr;
use time::*;

use format::Format;


use maps::*;
use options::options::Options;

const AUTHOR: &str = "rusty-pipit";


pub fn format_autoconfig(maps: &Maps, ops: &Options, file_name_base: &str) -> Format {
    let mut f = Format::new();
    f.append(&format_intro(&format!("{}.h", file_name_base)));
    f.append(&ops.format());
    f.append(&maps.format_wordmods());
    f.append(&maps.format_specials());
    f.append(&maps.format_plains());
    f.append(&maps.format_macros());
    f.append(&maps.format_words());
    f.append(&format_outro());
    f
}


pub fn format_intro(h_file_name: &str) -> Format{
    let autogen_message = make_autogen_message();
    let guard_name = make_guard_name(h_file_name);
    let mut f = Format::new();

    f.h += &autogen_message;
    f.h += &format!("#ifndef {}\n#define {}\n\n", guard_name, guard_name);
    f.h += "#include <Arduino.h>\n";
    f.h += "#include \"keycodes.h\"\n\n";
    f.h += "typedef void (*voidFuncPtr)(void);\n\n";
    f.h += make_debug_macros().as_ref();

    f.c += &autogen_message;
    f.c += &format!("#include \"{}\"\n\n", h_file_name);
    f
}

fn make_debug_macros() -> String {
    // TODO clean up debug macros
    let mut s = String::new();
    s += "#if DEBUG_MESSAGES == 0\n";
    s += "#define DEBUG1(msg)\n";
    s += "#define DEBUG1_LN(msg)\n";
    s += "#define DEBUG2(msg)\n";
    s += "#define DEBUG2_LN(msg)\n";
    s += "#endif\n\n";
    s += "#if DEBUG_MESSAGES == 1\n";
    s += "#define DEBUG1(msg) Serial.print(msg)\n";
    s += "#define DEBUG1_LN(msg) Serial.println(msg)\n";
    s += "#define DEBUG2(msg)\n";
    s += "#define DEBUG2_LN(msg)\n";
    s += "#endif\n\n";
    s += "#if DEBUG_MESSAGES == 2\n";
    s += "#define DEBUG1(msg) Serial.print(msg)\n";
    s += "#define DEBUG1_LN(msg) Serial.println(msg)\n";
    s += "#define DEBUG2(msg) Serial.print(msg)\n";
    s += "#define DEBUG2_LN(msg) Serial.println(msg)\n";
    s += "#endif\n\n ";
    s
}

pub fn format_outro() -> Format {
    Format {
        h: "\n#endif\n".to_string(),
        c: String::new(),
    }
}

fn make_autogen_message( ) -> String {
    let s = format!("/**\n * Automatically generated by {} on:  {}\n",
                    AUTHOR,
                    now().strftime("%c").unwrap()
    );
    s + " * Do not make changes here, they will be overwritten.\n */\n\n"
}

fn make_guard_name(h_file_name: &str) -> String {
    // TODO remove unsafe characters, like the python version
    // TODO is this guaranteed to be the basename already?
    let p = Path::new(h_file_name)
        .file_name()
        .expect("failed to get file name")
        .to_str()
        .unwrap()
        .to_string()
        .to_uppercase()
        .replace(".", "_");
    p + "_"

}
