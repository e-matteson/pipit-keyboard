use std::path::Path;
use std::ffi::OsStr;
use time::*;

use options::format::*;

const AUTHOR: &str = "rusty-pipit";

pub fn format_intro(h_file_name: &str) -> Format{
    let mut f = Format {
        h: String::new(),
        c: String::new(),
    };
    let guard_name = make_guard_name(h_file_name);
    let autogen_message = make_autogen_message();

    f.h += &autogen_message;
    f.h += &format!("#ifndef {}\n#define {}\n\n", guard_name, guard_name);
    f.h += "#include <Arduino.h>\n";
    f.h += "#include \"keycodes.h\"\n\n";
    f.h += "typedef void (*voidFuncPtr)(void);\n\n";

    // TODO clean up debug macros
    f.h += "#if DEBUG_MESSAGES == 0\n#define DEBUG1(msg)\n#define DEBUG1_LN(msg)\n#define DEBUG2(msg)\n#define DEBUG2_LN(msg)\n#endif\n\n";
    f.h += "#if DEBUG_MESSAGES == 1\n#define DEBUG1(msg) Serial.print(msg)\n#define DEBUG1_LN(msg) Serial.println(msg)\n#define DEBUG2(msg)\n#define DEBUG2_LN(msg)\n#endif\n\n";
    f.h += "#if DEBUG_MESSAGES == 2\n#define DEBUG1(msg) Serial.print(msg)\n#define DEBUG1_LN(msg) Serial.println(msg)\n#define DEBUG2(msg) Serial.print(msg)\n#define DEBUG2_LN(msg) Serial.println(msg)\n#endif\n\n ";

    f.c += &autogen_message;
    f.c += &format!("#include \"{}\"\n\n", h_file_name);
    f
}

// pub fn format_options() -> Format{

// }

pub fn format_outro() -> Format{
    Format {
        h: "\n#endif\n".to_string(),
        c: String::new(),
    }
}

fn make_autogen_message( ) -> String {
    let s = format!("/**\n * Automatically generated by {} on:  {}\n",
                    AUTHOR,
                    now().strftime("%c").unwrap()
    );
    s + " * Do not make changes here, they will be overwritten.\n */\n\n"
}

fn make_guard_name(h_file_name: &str) -> String {
    // TODO remove unsafe characters, like the python version
    // TODO is this guaranteed to be the basename already?
    let p = Path::new(h_file_name)
        .file_name()
        .expect("failed to get file name")
        .to_str()
        .unwrap()
        .to_string()
        .to_uppercase()
        .replace(".", "_");
    p + "_"

}
